create the app using "django-admin startapp [appname]"

config the app in apps.py file created
eg.
from django.apps import AppConfig
class ApptwoConfig(AppConfig):
    name = 'appTwo'


add the app in INSTALLED_APPS in settings.py file in the project dir

==========================================================================


1.Edit the html page so that it can take the django form returned by views.py and render it

eg.
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Users</title>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
    integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

  </head>
  <body>
    <div class="container">
      <h1>Please sign up here!</h1>
      <form method="POST">
        {{ form.as_p }}  #renders django form returned from views.py in a paragraph
        {% csrf_token %}
        <input type="submit" class='btn btn-primary' value="Submit">
      </form>
    </div>

  </body>
</html>

===================================================
2.create the model in models.py 


eg.
from django.db import models

# Create your models here.
class User(models.Model):
    first_name = models.CharField(max_length=128)
    last_name = models.CharField(max_length=128)
    email = models.EmailField(max_length=254,unique=True)


=====================================================

3.register the model in admin.py so as to view it in the admin interface 

eg.
from django.contrib import admin
from .models import User
# Register your models here.
admin.site.register(User)

==================================================


4.create forms.py file to setup a django form that will be generated from the model in models.py

eg.
from django import forms
from .models import User #importing the model created

class NewUserForm(forms.ModelForm):   #NewUserForm is a user defined class that creates a django form from a model in models.py file by extending forms.ModelForm instead of forms.Form file 
    #if we need form validators they can be added here		
    class Meta:
        model = User      #name of the model that we would like to convert into a form
        fields = '__all__' #this indicates that all the fields in User model shall be a form field in django form 

===============================================

5.editing views.py so that it can return the django form created form models 

from django.shortcuts import render
from .forms import NewUserForm     #importing the django form created from models 

def index(request):
    return render(request,'appTwo/index.html')  #when url path has nothing it returns index.html

def help(request):
    helpdict = {'help_insert':'HELP PAGE'}
    return render(request,'appTwo/help.html',context=helpdict)   #when url path has help it returns a help.html file that uses template taging to render text

def users(request):
    form = NewUserForm()   #creating object of the django form class defined in forms.py that is created using a model in models.py 

    if request.method == "POST":
        form = NewUserForm(request.POST)  #when the user supplies input to the form(via html) it creates an object of the django form with POST
        if form.is_valid(): 
            form.save(commit=True)     #sends the form data to model that inturn saves the data in db
            return index(request)      #this will take us back to the home page and returns the index.html
        else:
            print('ERROR FORM INVALID')

    return render(request,'appTwo/users.html',{'form':form})  #when the url has path "users" it returns the django form created from model once the form is validated and the record is saved to db takes us back to index.html

==============================================================

6.

editing the urls.py file in the app

eg.
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name="index"),
    path('users/', views.users, name="users"),  #when the url path is like this it specifices that control has to shift to users in views
    path('help/', views.help, name='help'),
]

editing the project urls.py

from django.contrib import admin
from django.urls import path, include
from appTwo import views

urlpatterns = [
    path('', include('appTwo.urls')),
    path('admin/', admin.site.urls),
]




